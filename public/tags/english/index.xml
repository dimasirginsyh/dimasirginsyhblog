<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>English on Blog Dimas Irgiansyah</title>
    <link>https://blog.dimasirgiansyah.my.id/tags/english/</link>
    <description>Recent content in English on Blog Dimas Irgiansyah</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 09 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.dimasirgiansyah.my.id/tags/english/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Recommendation Structure Folder For a Python FastAPI Projects</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/recommendation-structure-folder-for-a-python-fastapi-projects/</link>
      <pubDate>Mon, 09 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/recommendation-structure-folder-for-a-python-fastapi-projects/</guid>
      <description>When structuring a folder for a Python FastAPI project, it&amp;rsquo;s essential to maintain modularity and scalability, especially as your project grows. A good folder structure helps to separate concerns, making it easier to manage and maintain the codebase.&#xA;Here&amp;rsquo;s a recommended folder structure for a typical FastAPI project:&#xA;Recommended Folder Structure my_fastapi_project/ │ ├── app/ # Main application code │ ├── __init__.py │ ├── main.py # Entry point for the FastAPI application │ ├── api/ # API routes and business logic │ │ ├── __init__.</description>
    </item>
    <item>
      <title>How to completely uninstall NGINX</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/how-to-completely-uninstall-nginx/</link>
      <pubDate>Sun, 08 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/how-to-completely-uninstall-nginx/</guid>
      <description>To completely uninstall NGINX from your system, follow the appropriate instructions based on your operating system:&#xA;For Ubuntu/Debian-based systems: Stop the NGINX service:&#xA;sudo systemctl stop nginx Disable the NGINX service (so it doesn&amp;rsquo;t start on boot):&#xA;sudo systemctl disable nginx Remove NGINX and its dependencies: Run the following command to remove the NGINX package:&#xA;sudo apt-get purge nginx nginx-common nginx-full nginx-core Remove any unused dependencies: After removing NGINX, you can clean up any unused packages:</description>
    </item>
    <item>
      <title>How to deploy rust app to VPS</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/how-to-deploy-rust-app-to-vps/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/how-to-deploy-rust-app-to-vps/</guid>
      <description>Deploying a Rust application to a VPS (Virtual Private Server) involves several key steps. Here’s a comprehensive guide on how to do it:&#xA;Prerequisites Rust Toolchain installed on your local machine (using rustup). VPS Access: SSH access to the VPS (for example, using SSH keys). VPS OS: Linux-based OS (Ubuntu, Debian, CentOS, etc.) is assumed. Cargo (Rust&amp;rsquo;s package manager and build tool) should be installed on the VPS. A web server (like Nginx or Apache) for serving HTTP applications (optional, only necessary for web apps).</description>
    </item>
    <item>
      <title>Create a REST API with Rust and Connect to Telegram Bot</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/create-a-rest-api-with-rust-and-connect-to-telegram-bot/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/create-a-rest-api-with-rust-and-connect-to-telegram-bot/</guid>
      <description>To create a REST API with Rust that allows you to send photos and videos to a Telegram bot, we can use the Actix Web framework for the API and the Teloxide library for interacting with the Telegram bot.&#xA;Steps: Set up Actix Web to create the REST API. Use Teloxide to interact with the Telegram API for sending media. Use multipart form data to handle file uploads in the REST API.</description>
    </item>
    <item>
      <title>Recommendation Structure Folder For Rust Apps</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/recommendation-structure-folder-for-rust-apps/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/recommendation-structure-folder-for-rust-apps/</guid>
      <description>When organizing a Rust application, it&amp;rsquo;s important to follow a folder structure that is both maintainable and scalable. A well-organized folder structure makes it easier for developers to understand the code, contribute to the project, and scale the application as it grows. Below is a recommended structure for a typical Rust application, with explanations for each part.&#xA;Recommended Folder Structure my_rust_app/ ├── Cargo.toml # Project configuration (dependencies, metadata) ├── Cargo.lock # Lock file (generated after running `cargo build`) ├── src/ # Source files │ ├── main.</description>
    </item>
    <item>
      <title>Setting Subdomain Cloudflare for hugo website in github page</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/setting-subdomain-cloudflare-for-hugo-website-in-github-page/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/setting-subdomain-cloudflare-for-hugo-website-in-github-page/</guid>
      <description>If you&amp;rsquo;re using the Hugo framework to deploy your site on GitHub Pages and you&amp;rsquo;re experiencing issues with missing styles or incorrect layout after setting up a subdomain through Cloudflare, there are a few things to check and configure. Here&amp;rsquo;s a detailed guide to ensure that everything works smoothly.&#xA;1. Check the baseURL in Hugo&amp;rsquo;s Configuration The baseURL setting in Hugo&amp;rsquo;s config.toml (or config.yaml or config.json, depending on your setup) is critical for making sure your site works correctly with a custom subdomain or domain.</description>
    </item>
  </channel>
</rss>
