<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Blog Dimas Irgiansyah</title>
    <link>https://blog.dimasirgiansyah.my.id/tags/rust/</link>
    <description>Recent content in Rust on Blog Dimas Irgiansyah</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 07 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://blog.dimasirgiansyah.my.id/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to deploy rust app to VPS</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/how-to-deploy-rust-app-to-vps/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/how-to-deploy-rust-app-to-vps/</guid>
      <description>Deploying a Rust application to a VPS (Virtual Private Server) involves several key steps. Here’s a comprehensive guide on how to do it:&#xA;Prerequisites Rust Toolchain installed on your local machine (using rustup). VPS Access: SSH access to the VPS (for example, using SSH keys). VPS OS: Linux-based OS (Ubuntu, Debian, CentOS, etc.) is assumed. Cargo (Rust&amp;rsquo;s package manager and build tool) should be installed on the VPS. A web server (like Nginx or Apache) for serving HTTP applications (optional, only necessary for web apps).</description>
    </item>
    <item>
      <title>Pengalaman VPS menggunakan DEBIAN 12</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/pengalaman-vps-menggunakan-debian-12/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/pengalaman-vps-menggunakan-debian-12/</guid>
      <description>DEBIAN adalah distro yang sungguh popular, tetapi kenapa banyak hal yang cukup berbeda dengan UBUNTU yang merupakan salah satunya. Berikut adalah beberapa hal yang cukup berbeda di DEBIAN 12&#xA;1. Install rust yang tidak lancar Jika anda ingin menginstall rust, tidak cukup dengan perintah&#xA;curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh Anda juga harus menambahkan beberapa installasi yang harus dilakukan seperti&#xA;sudo apt install build-essential pkg-config libudev-dev libpq-dev Setelah install itu semua, saya masih tidak bisa melakukan build release aplikasi rust saya.</description>
    </item>
    <item>
      <title>Create a REST API with Rust and Connect to Telegram Bot</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/create-a-rest-api-with-rust-and-connect-to-telegram-bot/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/create-a-rest-api-with-rust-and-connect-to-telegram-bot/</guid>
      <description>To create a REST API with Rust that allows you to send photos and videos to a Telegram bot, we can use the Actix Web framework for the API and the Teloxide library for interacting with the Telegram bot.&#xA;Steps: Set up Actix Web to create the REST API. Use Teloxide to interact with the Telegram API for sending media. Use multipart form data to handle file uploads in the REST API.</description>
    </item>
    <item>
      <title>Recommendation Structure Folder For Rust Apps</title>
      <link>https://blog.dimasirgiansyah.my.id/posts/recommendation-structure-folder-for-rust-apps/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://blog.dimasirgiansyah.my.id/posts/recommendation-structure-folder-for-rust-apps/</guid>
      <description>When organizing a Rust application, it&amp;rsquo;s important to follow a folder structure that is both maintainable and scalable. A well-organized folder structure makes it easier for developers to understand the code, contribute to the project, and scale the application as it grows. Below is a recommended structure for a typical Rust application, with explanations for each part.&#xA;Recommended Folder Structure my_rust_app/ ├── Cargo.toml # Project configuration (dependencies, metadata) ├── Cargo.lock # Lock file (generated after running `cargo build`) ├── src/ # Source files │ ├── main.</description>
    </item>
  </channel>
</rss>
