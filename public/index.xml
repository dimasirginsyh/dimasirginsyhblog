<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog Dimas Irgiansyah</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Blog Dimas Irgiansyah</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 07 Dec 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to deploy rust app to VPS</title>
      <link>http://localhost:1313/posts/how-to-deploy-rust-app-to-vps/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/how-to-deploy-rust-app-to-vps/</guid>
      <description>&lt;p&gt;Deploying a Rust application to a VPS (Virtual Private Server) involves several key steps. Here’s a comprehensive guide on how to do it:&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Rust Toolchain&lt;/strong&gt; installed on your local machine (using &lt;code&gt;rustup&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VPS Access&lt;/strong&gt;: SSH access to the VPS (for example, using SSH keys).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VPS OS&lt;/strong&gt;: Linux-based OS (Ubuntu, Debian, CentOS, etc.) is assumed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cargo&lt;/strong&gt; (Rust&amp;rsquo;s package manager and build tool) should be installed on the VPS.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;web server&lt;/strong&gt; (like Nginx or Apache) for serving HTTP applications (optional, only necessary for web apps).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;step-by-step-guide&#34;&gt;Step-by-Step Guide&lt;/h3&gt;
&lt;h4 id=&#34;1-build-your-rust-application&#34;&gt;1. Build Your Rust Application&lt;/h4&gt;
&lt;p&gt;First, build your Rust app for release on your local machine:&lt;/p&gt;</description>
      <content>&lt;p&gt;Deploying a Rust application to a VPS (Virtual Private Server) involves several key steps. Here’s a comprehensive guide on how to do it:&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Rust Toolchain&lt;/strong&gt; installed on your local machine (using &lt;code&gt;rustup&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VPS Access&lt;/strong&gt;: SSH access to the VPS (for example, using SSH keys).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VPS OS&lt;/strong&gt;: Linux-based OS (Ubuntu, Debian, CentOS, etc.) is assumed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cargo&lt;/strong&gt; (Rust&amp;rsquo;s package manager and build tool) should be installed on the VPS.&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;web server&lt;/strong&gt; (like Nginx or Apache) for serving HTTP applications (optional, only necessary for web apps).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;step-by-step-guide&#34;&gt;Step-by-Step Guide&lt;/h3&gt;
&lt;h4 id=&#34;1-build-your-rust-application&#34;&gt;1. Build Your Rust Application&lt;/h4&gt;
&lt;p&gt;First, build your Rust app for release on your local machine:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cargo build --release
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will create an optimized, production-ready build of your application in the &lt;code&gt;target/release&lt;/code&gt; directory.&lt;/p&gt;
&lt;h4 id=&#34;2-set-up-your-vps&#34;&gt;2. Set Up Your VPS&lt;/h4&gt;
&lt;p&gt;Make sure you have access to your VPS and can SSH into it. You’ll need to install some dependencies for Rust and your application.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSH into your VPS&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh user@your_vps_ip
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-install-rust-on-the-vps&#34;&gt;3. Install Rust on the VPS&lt;/h4&gt;
&lt;p&gt;Install Rust on your VPS if it’s not already installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl --proto &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=https&amp;#39;&lt;/span&gt; --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once Rust is installed, make sure it’s available in your &lt;code&gt;$PATH&lt;/code&gt; by sourcing the Rust environment variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;source $HOME/.cargo/env
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4-transfer-your-rust-application-to-the-vps&#34;&gt;4. Transfer Your Rust Application to the VPS&lt;/h4&gt;
&lt;p&gt;There are multiple ways to transfer your application to your VPS. Here are two common approaches:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using SCP (Secure Copy Protocol)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From your local machine, run this command to transfer the compiled binary to your VPS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scp target/release/your_app user@your_vps_ip:/home/user/your_app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using Git&lt;/strong&gt; (if you use version control)&lt;/p&gt;
&lt;p&gt;If you have your Rust application in a Git repository, you can clone it on your VPS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/yourusername/your-repository.git
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd your-repository
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cargo build --release
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;5-install-dependencies-optional&#34;&gt;5. Install Dependencies (Optional)&lt;/h4&gt;
&lt;p&gt;If your app has dependencies like a database or additional libraries, install them on the VPS. For example, if you’re using PostgreSQL, install it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt-get install postgresql
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;6-run-the-application&#34;&gt;6. Run the Application&lt;/h4&gt;
&lt;p&gt;Once your application is transferred to the VPS, run it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./your_app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it’s a long-running service (like a web server or API), you might want to run it in the background.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Run in background using &lt;code&gt;nohup&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nohup ./your_app &amp;amp;&amp;gt; app.log &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;code&gt;systemd&lt;/code&gt; for automatic service management&lt;/strong&gt; (recommended for production)&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;systemd&lt;/code&gt; service file for managing your application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano /etc/systemd/system/your_app.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Example &lt;code&gt;your_app.service&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Unit]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Description&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Your Rust Application&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;After&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;network.target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Service]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;simple&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ExecStart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/user/your_app&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Restart&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;always&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WorkingDirectory&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/home/user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;[Install]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;WantedBy&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;multi-user.target&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then reload &lt;code&gt;systemd&lt;/code&gt;, enable and start the service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl enable your_app
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl start your_app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;7-configure-firewall-and-open-ports-optional&#34;&gt;7. Configure Firewall and Open Ports (Optional)&lt;/h4&gt;
&lt;p&gt;If your app uses a specific port (for example, HTTP on port 8080), you’ll need to open that port in your VPS firewall:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ufw allow 8080/tcp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;8-set-up-reverse-proxy-optional-for-web-apps&#34;&gt;8. Set Up Reverse Proxy (Optional for Web Apps)&lt;/h4&gt;
&lt;p&gt;If you are deploying a web app and want to serve it through a domain, you might want to use Nginx or Apache as a reverse proxy.&lt;/p&gt;
&lt;p&gt;Example Nginx config:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo nano /etc/nginx/sites-available/your_app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;server&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;listen&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;server_name&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;your-domain.com&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;location&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;/&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_pass&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;http://127.0.0.1:8080&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;# Assuming your app runs on port 8080
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;Host&lt;/span&gt; $host;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Real-IP&lt;/span&gt; $remote_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;X-Forwarded-For&lt;/span&gt; $proxy_add_x_forwarded_for;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Link it to &lt;code&gt;sites-enabled&lt;/code&gt; and restart Nginx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo ln -s /etc/nginx/sites-available/your_app /etc/nginx/sites-enabled/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl restart nginx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;9-monitor-and-maintain-the-application&#34;&gt;9. Monitor and Maintain the Application&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logs&lt;/strong&gt;: Use &lt;code&gt;journalctl&lt;/code&gt; to check the logs of your service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;journalctl -u your_app.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Updates&lt;/strong&gt;: Update your Rust app by pulling the latest changes and recompiling it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cargo build --release
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stop the app&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl stop your_app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After updating, restart it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo systemctl start your_app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Deploying a Rust app to a VPS is straightforward, especially once you&amp;rsquo;ve compiled it for release. Ensure you handle things like service management with &lt;code&gt;systemd&lt;/code&gt;, security (firewall, SSH), and reverse proxies for web applications to ensure your app runs smoothly in a production environment.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Pengalaman VPS menggunakan DEBIAN 12</title>
      <link>http://localhost:1313/posts/pengalaman-vps-menggunakan-debian-12/</link>
      <pubDate>Sat, 07 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/pengalaman-vps-menggunakan-debian-12/</guid>
      <description>&lt;p&gt;DEBIAN adalah distro yang sungguh popular, tetapi kenapa banyak hal yang cukup berbeda dengan UBUNTU yang merupakan salah satunya. Berikut adalah beberapa hal yang cukup berbeda di DEBIAN 12&lt;/p&gt;
&lt;h4 id=&#34;1-install-rust-yang-tidak-lancar&#34;&gt;1. Install rust yang tidak lancar&lt;/h4&gt;
&lt;p&gt;Jika anda ingin menginstall rust, tidak cukup dengan perintah&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl --proto &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=https&amp;#39;&lt;/span&gt; --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Anda juga harus menambahkan beberapa installasi yang harus dilakukan seperti&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install build-essential pkg-config libudev-dev libpq-dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setelah install itu semua, saya masih tidak bisa melakukan build release aplikasi rust saya.&lt;/p&gt;</description>
      <content>&lt;p&gt;DEBIAN adalah distro yang sungguh popular, tetapi kenapa banyak hal yang cukup berbeda dengan UBUNTU yang merupakan salah satunya. Berikut adalah beberapa hal yang cukup berbeda di DEBIAN 12&lt;/p&gt;
&lt;h4 id=&#34;1-install-rust-yang-tidak-lancar&#34;&gt;1. Install rust yang tidak lancar&lt;/h4&gt;
&lt;p&gt;Jika anda ingin menginstall rust, tidak cukup dengan perintah&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl --proto &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;=https&amp;#39;&lt;/span&gt; --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Anda juga harus menambahkan beberapa installasi yang harus dilakukan seperti&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sudo apt install build-essential pkg-config libudev-dev libpq-dev
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setelah install itu semua, saya masih tidak bisa melakukan build release aplikasi rust saya.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Create a REST API with Rust and Connect to Telegram Bot</title>
      <link>http://localhost:1313/posts/create-a-rest-api-with-rust-and-connect-to-telegram-bot/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/create-a-rest-api-with-rust-and-connect-to-telegram-bot/</guid>
      <description>&lt;p&gt;To create a REST API with Rust that allows you to send photos and videos to a Telegram bot, we can use the Actix Web framework for the API and the Teloxide library for interacting with the Telegram bot.&lt;/p&gt;
&lt;h3 id=&#34;steps&#34;&gt;Steps:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Set up Actix Web&lt;/strong&gt; to create the REST API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use Teloxide&lt;/strong&gt; to interact with the Telegram API for sending media.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use multipart form data&lt;/strong&gt; to handle file uploads in the REST API.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies:&lt;/h3&gt;
&lt;p&gt;You will need the following dependencies in &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;</description>
      <content>&lt;p&gt;To create a REST API with Rust that allows you to send photos and videos to a Telegram bot, we can use the Actix Web framework for the API and the Teloxide library for interacting with the Telegram bot.&lt;/p&gt;
&lt;h3 id=&#34;steps&#34;&gt;Steps:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Set up Actix Web&lt;/strong&gt; to create the REST API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use Teloxide&lt;/strong&gt; to interact with the Telegram API for sending media.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Use multipart form data&lt;/strong&gt; to handle file uploads in the REST API.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dependencies&#34;&gt;Dependencies:&lt;/h3&gt;
&lt;p&gt;You will need the following dependencies in &lt;code&gt;Cargo.toml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;dependencies&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;actix-web&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;4.0.0-beta.5&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;actix-rt&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.5.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;teloxide&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.7&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tokio&lt;/span&gt; = { &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;features&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;full&amp;#34;&lt;/span&gt;] }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;serde&lt;/span&gt; = { &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;features&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;derive&amp;#34;&lt;/span&gt;] }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;serde_json&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;dotenv&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.15&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;reqwest&lt;/span&gt; = { &lt;span style=&#34;color:#a6e22e&#34;&gt;version&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.11&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;features&lt;/span&gt; = [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multipart&amp;#34;&lt;/span&gt;] }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;futures-util&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.3&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Actix Web&lt;/strong&gt; for building the API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teloxide&lt;/strong&gt; for interacting with Telegram.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reqwest&lt;/strong&gt; for handling multipart form data.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dotenv&lt;/strong&gt; for managing environment variables like the Telegram bot token.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-by-step-guide&#34;&gt;Step-by-step guide:&lt;/h3&gt;
&lt;h4 id=&#34;1-create-the-mainrs-file&#34;&gt;1. Create the &lt;code&gt;main.rs&lt;/code&gt; file&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; actix_web::{web, App, HttpServer, Responder, HttpResponse};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; teloxide::{Bot, prelude::&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::sync::Arc;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; tokio::sync::Mutex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; futures_util::stream::StreamExt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; actix_multipart::Multipart;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; actix_web::Error;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; reqwest::Client;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[derive(Clone)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppState&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bot: &lt;span style=&#34;color:#a6e22e&#34;&gt;Bot&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chat_id: &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;, &lt;span style=&#34;color:#75715e&#34;&gt;// Chat ID where media will be sent
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send_media_to_telegram&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    app_state: &lt;span style=&#34;color:#a6e22e&#34;&gt;web&lt;/span&gt;::Data&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;AppState&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; payload: &lt;span style=&#34;color:#a6e22e&#34;&gt;Multipart&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) -&amp;gt; Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;HttpResponse, Error&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; client &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Client::new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; Some(field) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; payload.next().&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; field&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; field.content_disposition().get_filename().unwrap_or(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;file&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; media &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; reqwest::multipart::Form::new().part(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            reqwest::multipart::Part::reader(field)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .file_name(filename.to_string())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                .mime_str(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/octet-stream&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Here we send the media to Telegram using the bot instance
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; response &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; app_state
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .bot
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .send_photo(app_state.chat_id.clone(), media)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; response {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Ok(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Ok(HttpResponse::Ok().body(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Media sent successfully&amp;#34;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Err(_) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Ok(HttpResponse::InternalServerError().body(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Failed to send media&amp;#34;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Ok(HttpResponse::BadRequest().body(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No file received&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[actix_web::main]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::io::Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dotenv::dotenv().ok();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Load your bot token and chat ID from the environment variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; bot_token &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TELEGRAM_BOT_TOKEN&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .expect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TELEGRAM_BOT_TOKEN environment variable must be set&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; chat_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; std::env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TELEGRAM_CHAT_ID&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .expect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;TELEGRAM_CHAT_ID environment variable must be set&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .parse::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .expect(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Invalid chat_id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; bot &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Bot::new(bot_token);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; app_state &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; web::Data::new(AppState {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        bot,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        chat_id,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    HttpServer::new(&lt;span style=&#34;color:#66d9ef&#34;&gt;move&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        App::new()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .app_data(app_state.clone())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .route(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/send_media&amp;#34;&lt;/span&gt;, web::post().to(send_media_to_telegram))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .bind(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0.0.0.0:8080&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .run()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;explanation&#34;&gt;Explanation:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;AppState&lt;/code&gt; struct&lt;/strong&gt;: This holds the &lt;code&gt;Bot&lt;/code&gt; instance and the &lt;code&gt;chat_id&lt;/code&gt; where the media will be sent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;send_media_to_telegram&lt;/code&gt; function&lt;/strong&gt;: This is the handler for the &lt;code&gt;/send_media&lt;/code&gt; API endpoint. It accepts a multipart request, which is how file uploads are handled. It uses &lt;code&gt;reqwest::multipart::Form&lt;/code&gt; to prepare the file for upload, and then sends it to the Telegram bot using Teloxide’s &lt;code&gt;send_photo&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actix Web API Setup&lt;/strong&gt;: The API listens on port &lt;code&gt;8080&lt;/code&gt; and expects a POST request to the &lt;code&gt;/send_media&lt;/code&gt; endpoint with media data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;2-environment-setup&#34;&gt;2. Environment Setup:&lt;/h4&gt;
&lt;p&gt;Create a &lt;code&gt;.env&lt;/code&gt; file to store your bot token and the chat ID (where the bot will send media):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-env&#34; data-lang=&#34;env&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TELEGRAM_BOT_TOKEN&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;your-telegram-bot-token
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TELEGRAM_CHAT_ID&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;your-chat-id
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;3-running-the-server&#34;&gt;3. Running the Server:&lt;/h4&gt;
&lt;p&gt;To run the server, use the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cargo run
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The server should now be running, and you can send a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;http://localhost:8080/send_media&lt;/code&gt; with media (either a photo or video).&lt;/p&gt;
&lt;h4 id=&#34;4-sending-media-example-curl-request&#34;&gt;4. Sending Media (Example cURL Request):&lt;/h4&gt;
&lt;p&gt;You can send media using &lt;code&gt;curl&lt;/code&gt;. Here&amp;rsquo;s an example of how to send a photo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST http://localhost:8080/send_media -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;media=@/path/to/photo.jpg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To send a video:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST http://localhost:8080/send_media -F &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;media=@/path/to/video.mp4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;5-telegram-bot-token--chat-id&#34;&gt;5. Telegram Bot Token &amp;amp; Chat ID:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;To get your &lt;strong&gt;Telegram bot token&lt;/strong&gt;, create a bot by messaging the BotFather in Telegram.&lt;/li&gt;
&lt;li&gt;To get the &lt;strong&gt;chat ID&lt;/strong&gt;, you can message the bot in Telegram and use a simple HTTP request to fetch the chat ID. Here&amp;rsquo;s an example URL to check updates:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://api.telegram.org/bot&amp;lt;your-bot-token&amp;gt;/getUpdates
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will return the chat ID associated with your bot&amp;rsquo;s messages.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Actix Web&lt;/strong&gt; provides the web server to handle file uploads.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teloxide&lt;/strong&gt; sends the uploaded files (photos/videos) to Telegram.&lt;/li&gt;
&lt;li&gt;You can extend this by adding more features, such as handling different types of media or better error handling.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Recommendation Structure Folder For Rust Apps</title>
      <link>http://localhost:1313/posts/recommendation-structure-folder-for-rust-apps/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/recommendation-structure-folder-for-rust-apps/</guid>
      <description>&lt;p&gt;When organizing a Rust application, it&amp;rsquo;s important to follow a folder structure that is both maintainable and scalable. A well-organized folder structure makes it easier for developers to understand the code, contribute to the project, and scale the application as it grows. Below is a recommended structure for a typical Rust application, with explanations for each part.&lt;/p&gt;
&lt;h3 id=&#34;recommended-folder-structure&#34;&gt;Recommended Folder Structure&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;my_rust_app/
├── Cargo.toml                # Project configuration (dependencies, metadata)
├── Cargo.lock                # Lock file (generated after running `cargo build`)
├── src/                      # Source files
│   ├── main.rs               # Main entry point (binary application)
│   ├── lib.rs                # Common library code (if applicable)
│   ├── bin/                  # Additional binaries (optional)
│   ├── models/               # Data models (e.g., structs, enums, etc.)
│   ├── services/             # Business logic / services
│   ├── handlers/             # Request handlers (e.g., for web servers)
│   ├── utils/                # Utility modules (e.g., helpers, utils)
│   ├── db/                   # Database-related code (e.g., migrations, queries)
│   ├── config/               # Configuration and environment setup
│   └── tests/                # Unit and integration tests
├── examples/                 # Example projects or usage demonstrations
├── target/                   # Build output directory (auto-generated by Cargo)
├── tests/                    # Integration tests (optional, alternative to `src/tests`)
├── scripts/                  # Utility scripts (e.g., setup, data generation)
└── README.md                 # Project documentation
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;explanation-of-folders-and-files&#34;&gt;Explanation of Folders and Files&lt;/h3&gt;
&lt;h4 id=&#34;1-cargotoml--cargolock&#34;&gt;1. &lt;code&gt;Cargo.toml&lt;/code&gt; &amp;amp; &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/strong&gt;: This is the main configuration file for the Rust project. It contains metadata, dependencies, and build configuration for the project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/strong&gt;: This file is automatically generated when you run &lt;code&gt;cargo build&lt;/code&gt; or &lt;code&gt;cargo install&lt;/code&gt; to lock the dependencies to specific versions. You should commit this file to ensure consistent builds.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-src&#34;&gt;2. &lt;code&gt;src/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This folder contains the core source code of the project.&lt;/p&gt;</description>
      <content>&lt;p&gt;When organizing a Rust application, it&amp;rsquo;s important to follow a folder structure that is both maintainable and scalable. A well-organized folder structure makes it easier for developers to understand the code, contribute to the project, and scale the application as it grows. Below is a recommended structure for a typical Rust application, with explanations for each part.&lt;/p&gt;
&lt;h3 id=&#34;recommended-folder-structure&#34;&gt;Recommended Folder Structure&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;my_rust_app/
├── Cargo.toml                # Project configuration (dependencies, metadata)
├── Cargo.lock                # Lock file (generated after running `cargo build`)
├── src/                      # Source files
│   ├── main.rs               # Main entry point (binary application)
│   ├── lib.rs                # Common library code (if applicable)
│   ├── bin/                  # Additional binaries (optional)
│   ├── models/               # Data models (e.g., structs, enums, etc.)
│   ├── services/             # Business logic / services
│   ├── handlers/             # Request handlers (e.g., for web servers)
│   ├── utils/                # Utility modules (e.g., helpers, utils)
│   ├── db/                   # Database-related code (e.g., migrations, queries)
│   ├── config/               # Configuration and environment setup
│   └── tests/                # Unit and integration tests
├── examples/                 # Example projects or usage demonstrations
├── target/                   # Build output directory (auto-generated by Cargo)
├── tests/                    # Integration tests (optional, alternative to `src/tests`)
├── scripts/                  # Utility scripts (e.g., setup, data generation)
└── README.md                 # Project documentation
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;explanation-of-folders-and-files&#34;&gt;Explanation of Folders and Files&lt;/h3&gt;
&lt;h4 id=&#34;1-cargotoml--cargolock&#34;&gt;1. &lt;code&gt;Cargo.toml&lt;/code&gt; &amp;amp; &lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/strong&gt;: This is the main configuration file for the Rust project. It contains metadata, dependencies, and build configuration for the project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;Cargo.lock&lt;/code&gt;&lt;/strong&gt;: This file is automatically generated when you run &lt;code&gt;cargo build&lt;/code&gt; or &lt;code&gt;cargo install&lt;/code&gt; to lock the dependencies to specific versions. You should commit this file to ensure consistent builds.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-src&#34;&gt;2. &lt;code&gt;src/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This folder contains the core source code of the project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;main.rs&lt;/code&gt;&lt;/strong&gt;: The main entry point of the application. If you&amp;rsquo;re building a binary application, this is the file where the program starts executing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;lib.rs&lt;/code&gt;&lt;/strong&gt;: If your project is a library or contains shared functionality, the &lt;code&gt;lib.rs&lt;/code&gt; file is the main library entry point. It can also be used in combination with &lt;code&gt;main.rs&lt;/code&gt; for shared logic between binaries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;bin/&lt;/code&gt;&lt;/strong&gt;: This folder is optional, but if you have multiple binary applications in the same repository (e.g., command-line tools), you can put them here. Each file in the &lt;code&gt;bin/&lt;/code&gt; directory is treated as a separate binary by Cargo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-models&#34;&gt;3. &lt;code&gt;models/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Contains data models used in your application (e.g., structs, enums). These models represent the entities in your application, such as user accounts, products, etc.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/models/user.rs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; id: &lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; name: String,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;4-services&#34;&gt;4. &lt;code&gt;services/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This folder contains the core business logic or services that operate on the models. These could include things like user authentication, data processing, or application-specific logic.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/services/authentication.rs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;authenticate&lt;/span&gt;(user: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Authentication logic here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;5-handlers&#34;&gt;5. &lt;code&gt;handlers/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This folder is useful if you are building a web server or API. It will contain the request handlers or routes that respond to different HTTP requests.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/handlers/user_handler.rs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;crate&lt;/span&gt;::services::authentication;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login_handler&lt;/span&gt;(user: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;User&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; authentication::authenticate(user) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Send success response
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Send error response
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;6-utils&#34;&gt;6. &lt;code&gt;utils/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Contains utility functions that are used throughout your application but don&amp;rsquo;t fit into other categories (e.g., string manipulation, logging, validation).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/utils/validation.rs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;validate_email&lt;/span&gt;(email: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;str&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Validate email format
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    email.contains(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;7-db&#34;&gt;7. &lt;code&gt;db/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Contains database-related logic, such as database models, queries, and migrations. If you&amp;rsquo;re using an ORM like &lt;code&gt;Diesel&lt;/code&gt;, &lt;code&gt;SQLx&lt;/code&gt;, or interacting with a database directly, this is where the code goes.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/db/mod.rs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;connect_to_db&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// Connection logic here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;8-config&#34;&gt;8. &lt;code&gt;config/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Contains configuration files and environment setup logic. It may include code for loading configuration from environment variables, config files, etc.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/config/mod.rs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; std::env;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;load_config&lt;/span&gt;() -&amp;gt; String {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    env::var(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;MY_CONFIG&amp;#34;&lt;/span&gt;).unwrap_or_else(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default_value&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;9-tests&#34;&gt;9. &lt;code&gt;tests/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Tests in Rust can be placed in the same module as the code or in a dedicated &lt;code&gt;tests&lt;/code&gt; folder. If you want to put integration tests outside the &lt;code&gt;src/&lt;/code&gt; folder, use this directory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Unit tests&lt;/strong&gt; can be inside the same file as the code.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration tests&lt;/strong&gt; can go into this directory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/tests/integration_test.rs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[cfg(test)]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;mod&lt;/span&gt; tests {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;super&lt;/span&gt;::&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#[test]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;test_authenticate&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; User { id: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, name: String::from(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;) };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        assert!(authenticate(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;user));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;10-examples&#34;&gt;10. &lt;code&gt;examples/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This folder can contain example code or small, runnable projects that demonstrate how to use your library or app. This is especially useful if you&amp;rsquo;re building a library crate and want to show how it works.&lt;/p&gt;
&lt;h4 id=&#34;11-scripts&#34;&gt;11. &lt;code&gt;scripts/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;For any utility or automation scripts you may have, such as database migrations, test data generation, or deployment scripts.&lt;/p&gt;
&lt;h4 id=&#34;12-target&#34;&gt;12. &lt;code&gt;target/&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This is the build output folder that Cargo generates. You should &lt;strong&gt;not&lt;/strong&gt; commit this folder to your version control system, as it&amp;rsquo;s automatically created when you build your project. Use &lt;code&gt;.gitignore&lt;/code&gt; to exclude it.&lt;/p&gt;
&lt;h4 id=&#34;13-readmemd&#34;&gt;13. &lt;code&gt;README.md&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;The README file should provide basic information about the project, such as how to set up, run, and test the application.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;example-folder-layout&#34;&gt;Example Folder Layout&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;my_rust_app/
├── Cargo.toml
├── Cargo.lock
├── src/
│   ├── main.rs
│   ├── lib.rs
│   ├── bin/
│   │   ├── app1.rs
│   │   └── app2.rs
│   ├── models/
│   │   ├── user.rs
│   │   └── product.rs
│   ├── services/
│   │   ├── authentication.rs
│   │   └── order_processing.rs
│   ├── handlers/
│   │   └── user_handler.rs
│   ├── utils/
│   │   └── validation.rs
│   ├── db/
│   │   └── db_connection.rs
│   ├── config/
│   │   └── config_loader.rs
│   └── tests/
│       └── integration_test.rs
├── examples/
│   └── basic_usage.rs
├── target/
├── scripts/
├── README.md
└── .gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;additional-notes&#34;&gt;Additional Notes:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Modularization&lt;/strong&gt;: Try to modularize your code as much as possible to make it easier to maintain and test. Each folder/module should have a specific responsibility.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt;: It&amp;rsquo;s a good practice to write unit and integration tests to ensure the stability of your application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: Keep your codebase well-documented. A clear README and comments within the code will make it easier for others (and your future self) to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This folder structure is flexible, so feel free to adjust it based on your specific use case and project requirements!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Setting Subdomain Cloudflare for hugo website in github page</title>
      <link>http://localhost:1313/posts/setting-subdomain-cloudflare-for-hugo-website-in-github-page/</link>
      <pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/setting-subdomain-cloudflare-for-hugo-website-in-github-page/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;re using the &lt;strong&gt;Hugo&lt;/strong&gt; framework to deploy your site on GitHub Pages and you&amp;rsquo;re experiencing issues with missing styles or incorrect layout after setting up a subdomain through Cloudflare, there are a few things to check and configure. Here&amp;rsquo;s a detailed guide to ensure that everything works smoothly.&lt;/p&gt;
&lt;h3 id=&#34;1-check-the-baseurl-in-hugos-configuration&#34;&gt;1. &lt;strong&gt;Check the &lt;code&gt;baseURL&lt;/code&gt; in Hugo&amp;rsquo;s Configuration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;baseURL&lt;/code&gt; setting in Hugo&amp;rsquo;s &lt;code&gt;config.toml&lt;/code&gt; (or &lt;code&gt;config.yaml&lt;/code&gt; or &lt;code&gt;config.json&lt;/code&gt;, depending on your setup) is critical for making sure your site works correctly with a custom subdomain or domain.&lt;/p&gt;</description>
      <content>&lt;p&gt;If you&amp;rsquo;re using the &lt;strong&gt;Hugo&lt;/strong&gt; framework to deploy your site on GitHub Pages and you&amp;rsquo;re experiencing issues with missing styles or incorrect layout after setting up a subdomain through Cloudflare, there are a few things to check and configure. Here&amp;rsquo;s a detailed guide to ensure that everything works smoothly.&lt;/p&gt;
&lt;h3 id=&#34;1-check-the-baseurl-in-hugos-configuration&#34;&gt;1. &lt;strong&gt;Check the &lt;code&gt;baseURL&lt;/code&gt; in Hugo&amp;rsquo;s Configuration&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;baseURL&lt;/code&gt; setting in Hugo&amp;rsquo;s &lt;code&gt;config.toml&lt;/code&gt; (or &lt;code&gt;config.yaml&lt;/code&gt; or &lt;code&gt;config.json&lt;/code&gt;, depending on your setup) is critical for making sure your site works correctly with a custom subdomain or domain.&lt;/p&gt;
&lt;p&gt;For a GitHub Pages deployment, you&amp;rsquo;ll need to set the &lt;code&gt;baseURL&lt;/code&gt; in your Hugo configuration file to the full URL of your site (including &lt;code&gt;https://&lt;/code&gt;).&lt;/p&gt;
&lt;h4 id=&#34;example-configuration-for-configtoml&#34;&gt;Example configuration for &lt;code&gt;config.toml&lt;/code&gt;:&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;baseURL&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://your-subdomain.example.com/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This ensures that Hugo generates links (e.g., for stylesheets, JavaScript files, and images) relative to the root of your subdomain.&lt;/p&gt;
&lt;h3 id=&#34;2-set-up-the-dns-for-your-subdomain-in-cloudflare&#34;&gt;2. &lt;strong&gt;Set Up the DNS for Your Subdomain in Cloudflare&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Ensure your Cloudflare DNS settings are correct to point your subdomain to GitHub Pages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go to Cloudflare dashboard&lt;/strong&gt; and select your domain.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Go to the DNS settings&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Add a &lt;code&gt;CNAME&lt;/code&gt; record for your subdomain:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Type&lt;/strong&gt;: CNAME&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Name&lt;/strong&gt;: &lt;code&gt;blog&lt;/code&gt; (or whatever your subdomain is, such as &lt;code&gt;blog&lt;/code&gt; or &lt;code&gt;shop&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target&lt;/strong&gt;: &lt;code&gt;your-username.github.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TTL&lt;/strong&gt;: Auto or 5 minutes (default)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Save the DNS record.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This points your subdomain to the GitHub Pages site, where Hugo is hosted.&lt;/p&gt;
&lt;h3 id=&#34;3-ensure-proper-cname-file-in-your-github-repository&#34;&gt;3. &lt;strong&gt;Ensure Proper &lt;code&gt;CNAME&lt;/code&gt; File in Your GitHub Repository&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;GitHub Pages requires a &lt;code&gt;CNAME&lt;/code&gt; file in your repository to recognize your custom domain or subdomain.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In your GitHub repository, create a file named &lt;code&gt;CNAME&lt;/code&gt; (no extension) in the &lt;strong&gt;root&lt;/strong&gt; of the repository.&lt;/li&gt;
&lt;li&gt;Inside the &lt;code&gt;CNAME&lt;/code&gt; file, add your subdomain (e.g., &lt;code&gt;blog.example.com&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example content of the &lt;code&gt;CNAME&lt;/code&gt; file:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;blog.example.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will ensure that GitHub Pages serves your site under that subdomain.&lt;/p&gt;
&lt;h3 id=&#34;4-check-your-hugo-theme-and-static-folder-paths&#34;&gt;4. &lt;strong&gt;Check Your Hugo &lt;code&gt;theme&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; Folder Paths&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If styles are missing, it might be due to how Hugo generates paths to assets such as CSS or JavaScript. When deploying to a subdomain, it&amp;rsquo;s important to ensure that all assets are being served correctly with the right paths.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Check your theme’s &lt;code&gt;static&lt;/code&gt; folder&lt;/strong&gt;: Ensure that assets like CSS and JS are correctly placed in the &lt;code&gt;static&lt;/code&gt; directory of your Hugo site. Hugo will copy anything inside the &lt;code&gt;static&lt;/code&gt; folder to the root of your deployed site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Verify the correct &lt;code&gt;href&lt;/code&gt; and &lt;code&gt;src&lt;/code&gt; paths&lt;/strong&gt;: In Hugo, you should be using Hugo’s built-in functions to generate URLs for assets, which ensures they work regardless of your domain or subdomain.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, for your CSS link:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;relURL&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;}}&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This uses &lt;code&gt;relURL&lt;/code&gt;, which will correctly generate the path to the &lt;code&gt;style.css&lt;/code&gt; file relative to your root domain or subdomain.&lt;/p&gt;
&lt;h3 id=&#34;5-ensure-correct-github-pages-deployment-settings&#34;&gt;5. &lt;strong&gt;Ensure Correct GitHub Pages Deployment Settings&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re deploying your Hugo site to GitHub Pages, ensure the repository settings are correctly configured:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Go to your GitHub repository settings&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Scroll down to the &lt;strong&gt;GitHub Pages&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Ensure the &lt;strong&gt;Source&lt;/strong&gt; is set to the correct branch (typically &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;gh-pages&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;GitHub should serve your site from the &lt;code&gt;public&lt;/code&gt; directory after Hugo builds the site.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;6-clear-cache-and-check-https-settings&#34;&gt;6. &lt;strong&gt;Clear Cache and Check HTTPS Settings&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Sometimes, issues with missing styles can arise from cached assets or incorrect HTTPS handling.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cloudflare Cache&lt;/strong&gt;: Go to &lt;strong&gt;Cloudflare &amp;gt; Caching &amp;gt; Purge Everything&lt;/strong&gt; to ensure that the latest version of your site is being served.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSL/TLS Settings&lt;/strong&gt;: Cloudflare forces HTTPS by default, which is good for security. Ensure that the &lt;strong&gt;SSL/TLS&lt;/strong&gt; settings in Cloudflare are set to &lt;strong&gt;Full&lt;/strong&gt; or &lt;strong&gt;Full (Strict)&lt;/strong&gt; to avoid mixed content issues between HTTPS (Cloudflare) and HTTP (GitHub Pages).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-check-for-mixed-content-issues&#34;&gt;7. &lt;strong&gt;Check for Mixed Content Issues&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re using HTTPS (which you should), you may run into &amp;ldquo;mixed content&amp;rdquo; issues where some resources (like stylesheets or scripts) are being loaded over HTTP rather than HTTPS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Open your site in the browser&lt;/strong&gt; and check the developer console (right-click &amp;gt; Inspect &amp;gt; Console tab) for any warnings or errors related to mixed content.&lt;/li&gt;
&lt;li&gt;If there are any HTTP resources, ensure all links in your Hugo site use HTTPS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://your-subdomain.example.com/css/style.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or use Hugo’s &lt;code&gt;relURL&lt;/code&gt; to generate proper links.&lt;/p&gt;
&lt;h3 id=&#34;8-wait-for-dns-propagation&#34;&gt;8. &lt;strong&gt;Wait for DNS Propagation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;If you just made DNS changes, it may take some time (up to 24 hours) for DNS propagation to take full effect. Be patient, as changes may not appear immediately.&lt;/p&gt;
&lt;h3 id=&#34;9-clear-browser-cache&#34;&gt;9. &lt;strong&gt;Clear Browser Cache&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Browsers cache CSS and JavaScript, so if your styles aren’t loading properly, try clearing your browser cache or use an incognito window to load the site.&lt;/p&gt;
&lt;h3 id=&#34;in-summary&#34;&gt;In Summary:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Set &lt;code&gt;baseURL&lt;/code&gt; correctly&lt;/strong&gt; in &lt;code&gt;config.toml&lt;/code&gt; for Hugo.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configure Cloudflare DNS&lt;/strong&gt; to point to GitHub Pages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create a &lt;code&gt;CNAME&lt;/code&gt; file&lt;/strong&gt; in your GitHub repo with your subdomain.&lt;/li&gt;
&lt;li&gt;Ensure all &lt;strong&gt;asset paths&lt;/strong&gt; in your Hugo templates are correct using &lt;code&gt;relURL&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check HTTPS settings&lt;/strong&gt; and ensure &lt;strong&gt;no mixed content&lt;/strong&gt; (HTTP vs HTTPS).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear cache&lt;/strong&gt; in Cloudflare and your browser.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you make these changes, your Hugo site hosted on GitHub Pages should display correctly under your subdomain with all styles and assets loading as expected.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
